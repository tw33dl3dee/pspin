program -> (module sep?)+;

module -> proctype | decl_list;

proctype -> proc_hdr P_LPAREN decl_list? P_RPAREN P_LBRACE sequence P_RBRACE;

proc_hdr -> active? K_PROC name;

init_hdr -> K_INIT;

name_list -> name | name_list P_COMMA name;

decl_list -> decl | decl_list P_SEMICOL decl;

decl -> visible? typename ivar_list;

ivar_list -> ivar | ivar_list P_COMMA ivar;

typename -> T_TYPE | K_CHAN;

active -> K_ACTIVE P_LSQBRACE const P_RSQBRACE | K_ACTIVE;

sequence -> epsilon | step | step sep sequence;

sep -> P_SEMICOL | P_SEQ;

step -> stmt | decl;

varref_list -> varref | varref_list P_COMMA varref;

ivar -> name P_LSQBRACE expr P_RSQBRACE | name ch_init | name ivar_init?;

ivar_init -> O_ASSIGN expr;

ch_init -> O_ASSIGN P_LSQBRACE const P_RSQBRACE K_OF P_LBRACE typename_list P_RBRACE;

typename_list -> typename | typename_list P_COMMA typename;

varref -> name | name idx | varref P_DOT name;

idx -> P_LSQBRACE expr P_RSQBRACE;

send -> varref O_SEND send_args;

recv -> varref O_RECV recv_args;

send_args -> arg_list | expr P_LPAREN arg_list P_RPAREN;

recv_args -> recv_list | recv_arg P_LPAREN recv_list P_RPAREN;

recv_list -> recv_arg | recv_list P_COMMA recv_arg;

recv_arg -> varref | K_EVAL P_LPAREN varref P_RPAREN | O_ADD? const;

assign -> varref O_ASSIGN expr | varref O_INCDEC;

stmt -> K_IF options K_FI | K_DO options K_OD | K_ATOMIC P_LBRACE sequence P_RBRACE | send | recv | assign | K_ELSE | K_BREAK | K_GOTO name | name P_COLON stmt | K_PRINT P_LPAREN T_STRING print_list? P_RPAREN | K_ASSERT P_LPAREN expr P_RPAREN | expr;

print_list -> P_COMMA arg_list;

arg_list -> arg | arg_list P_COMMA arg;

arg -> expr;

options -> P_COLON P_COLON sequence | options P_COLON P_COLON sequence;

expr -> K_RUN name P_LPAREN arg_list? P_RPAREN prio? | expr O_AND expr | expr O_OR expr | expr O_ADD expr | expr O_MULT expr | expr O_BIT expr | expr P_LAQUO expr | expr P_RAQUO expr | expr O_RELEQ expr | expr O_EQ expr | expr O_SHIFT expr | O_TILDE expr | O_ADD expr | O_SEND expr | P_LPAREN expr P_RPAREN | T_BUILTIN P_LPAREN expr P_RPAREN | T_CHANOP P_LPAREN varref P_RPAREN | P_LPAREN expr P_SEQ expr P_COLON expr P_RPAREN | poll | varref | const | name idx P_AT name;

uname -> name;

name -> T_ID;

const -> T_NUMBER;
