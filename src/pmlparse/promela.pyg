# ----------------------------------------------
# promela.pyg
# `timeout' and `np_' are varrefs here.
# ----------------------------------------------

code:
	from expression import *
	from variable import *
	from statement import *
	from utils import listify

	class ParseError(RuntimeError):
		def __init__(self, str):
			RuntimeError.__init__(self, str)

	class NotImplementedError(ParseError):
		def __init__(self, feature):
			ParseError.__init__(self, "Feature `%s' not implemented" % feature)


%left P_DOT;
%left O_MULT;
%left O_ADD;
%left O_SHIFT;
%left O_EQ O_RELEQ P_LAQUO P_RAQUO;
%left O_BIT;
%left O_AND;
%left O_OR;


spec ->
	(module sep?)+:
		codegen.finish()
		return codegen
	;

module ->
	proctype
	| init
	| never
	| trace
	| utype
	| mtype
	| decl_list
	;

proctype ->
	proc_hdr P_LPAREN decl_list? P_RPAREN prio? enabler? P_LBRACE sequence P_RBRACE:
		if kids[2]:
			codegen.cur_proc.set_args(kids[2])
		codegen.end_proc()
	;

proc_hdr ->
	active? K_PROC name:
		codegen.start_proc(kids[0] or 0, kids[2])
	;

init ->
	init_hdr prio? P_LBRACE sequence P_RBRACE:
		codegen.cur_proc.set_args(kids[2])
		codegen.cur_proc.set_body(kids[7])
		codegen.end_proc()
	;

init_hdr ->
	K_INIT:
		codegen.start_proc(1, 'init')
	;

never ->
	K_NEVER P_LBRACE sequence P_RBRACE:
		raise NotImplementedError(kids[0])
	;

trace ->
	K_TRACE P_LBRACE sequence P_RBRACE:
		raise NotImplementedError(kids[0])
	;

utype ->
	utype_hdr P_LBRACE decl_list P_RBRACE:
		codegen.end_utype()
	;

utype_hdr ->
	K_TYPEDEF name:
		return codegen.start_utype(kids[1])
	;

mtype ->
	K_MTYPE O_ASSIGN? P_LBRACE name_list P_RBRACE:
		raise NotImplementedError(kids[0])
	;

name_list ->
	name:
		return kids
	| name_list P_COMMA name:
		return kids[0] + [kids[2]]
	;

decl_list ->
	decl:
		return kids[0]
	| decl_list P_SEMICOL decl:
		return kids[0] + kids[2]
	;

decl ->
	visible? typename ivar_list:
		return [codegen.add_var(v, kids[1], kids[0]) for v in kids[2]]
	;

ivar_list ->
	ivar:
		return kids
	| ivar_list P_COMMA ivar:
		return kids[0] + [kids[2]]
	;

typename ->
	T_TYPE:
		return SimpleType(kids[0])
	| K_MTYPE:
		raise NotImplementedError(kids[0])
	| K_CHAN:
		return ChanType()
	| uname:
		return codegen.lookup_utype(kids[0])
	;

active ->
	K_ACTIVE P_LSQBRACE const P_RSQBRACE:
		return kids[2]
	| K_ACTIVE:
		return 1
	;

prio ->
	K_PRIO const:
		raise NotImplementedError(kids[0])
	;

enabler ->
	K_PROVIDED P_LPAREN expr P_RPAREN:
		raise NotImplementedError(kids[0])
	;

visible ->
	K_VIS:
		return kids[0]
	;

sequence ->
# empty
	| step:
		return kids[0]
	| step sep sequence:
		return kids[0] + kids[2]
	;

sep ->
	P_SEMICOL
	| P_SEQ
	;

step ->
	stmt:
		return [codegen.cur_proc.add_stmt(k) for k in listify(kids[0])]
	| stmt K_UNLESS stmt:
		raise NotImplementedError(kids[0])
	| decl
	| K_EXCL varref_list:
		raise NotImplementedError(kids[0])
	;

varref_list ->
	varref:
		return kids
	| varref_list P_COMMA varref:
		return kids[0] + [kids[2]]
	;

ivar ->
	name P_LSQBRACE expr P_RSQBRACE:
		return Variable(kids[0], None, kids[2], None)
	| name ch_init:
		return Channel(kids[0], *kids[1])
	| name ivar_init?:
		return Variable(kids[0], None, None, kids[1] or None)
#	TODO: bit fields
#	| name P_COLON const ivar_init?
	;

ivar_init ->
	O_ASSIGN expr:
		return kids[1]
	;

ch_init ->
	O_ASSIGN P_LSQBRACE const P_RSQBRACE K_OF P_LBRACE typename_list P_RBRACE:
		return (kids[2], kids[6])
	;

typename_list ->
	typename:
		return kids
	| typename_list P_COMMA typename:
		return kids[0] + [kids[2]]
	;

varref ->
	name:
		return SimpleRef(codegen.lookup_var(kids[0]))
	| varref idx:
		return IdxRef(*kids)
	| varref P_DOT name:
		return FieldRef(kids[0], kids[2])
	;

idx ->
	P_LSQBRACE expr P_RSQBRACE:
		return kids[1]
	;

send ->
	varref O_SEND send_args:
		return SendStmt(kids[0], kids[2])
	;

recv ->
	varref O_RECV recv_args:
		return RecvStmt(kids[0], kids[2])
	| varref O_RECV P_LAQUO recv_nd_args
		raise NotImplementedError('non-destructive receive')
	;

recv_nd_args ->
	recv_args P_RAQUO:
		return kids[1]
	;

poll ->
	varref O_RECV P_LSQBRACE recv_args P_RSQBRACE:
		raise NotImplementedError('poll')
	;

send_args ->
	arg_list:
		return kids[0]
	| expr P_LPAREN arg_list P_RPAREN:
		return [kids[0]] + kids[2]
	;

recv_args ->
	recv_list:
		return kids[0]
	| recv_arg P_LPAREN recv_list P_RPAREN:
		return [kids[0]] + kids[2]
	;

recv_list ->
	recv_arg:
		return kids
	| recv_list P_COMMA recv_arg:
		return kids[0] + [kids[2]]
	;

recv_arg ->
	varref:
		return kids[0]
	| K_EVAL P_LPAREN varref P_RPAREN:
		raise NotImplementedError(kids[0])
	| O_ADD? const:
		raise NotImplementedError('receive-matching')
	;

assign ->
	varref O_ASSIGN expr:
		return AssignStmt(kids[0], kids[2])
	| varref O_INCDEC:
		return IncDecStmt(*kids)
	;

stmt ->
	K_IF options K_FI:
		return IfStmt(kids[1])
	| K_DO options K_OD:
		return DoStmt(kids[1])
	| K_ATOMIC P_LBRACE sequence P_RBRACE:
		return AtomicStmt(kids[2] + [codegen.cur_proc.add_stmt(NoopStmt('atomic END', True))])
	| K_DSTEP P_LBRACE sequence P_RBRACE:
		# d_step end statement is non-omittable (single exit point)
		return DstepStmt(kids[2] + [codegen.cur_proc.add_stmt(NoopStmt('d_step END'))])
	| K_C_CODE c_cond? c_code:
		return CCodeStmt(kids[1], kids[2])
	| P_LBRACE sequence P_RBRACE:
		raise NotImplementedError('nested blocks')
	| send:
		return kids[0]
	| recv:
		return kids[0]
	| assign:
		return kids[0]
	| K_ELSE:
		return ElseStmt()
	| K_BREAK:
		return BreakStmt()
	| K_GOTO name:
		return GotoStmt(codegen.cur_proc.lookup_label(kids[1]))
	| name P_COLON stmt:
		label = codegen.cur_proc.lookup_label(kids[0])
		listify(kids[2])[0].add_label(label)
		return kids[2]
	| K_PRINT P_LPAREN T_STRING print_list? P_RPAREN:
		return PrintStmt(kids[2], kids[3])
	| K_ASSERT P_LPAREN expr P_RPAREN:
		return AssertStmt(kids[2])
	| expr:
		return ExprStmt(kids[0])
	;

print_list ->
	P_COMMA arg_list:
		return kids[1]
	;

arg_list ->
	arg:
		return kids
	| arg_list P_COMMA arg:
		return kids[0] + [kids[2]]
	;

arg ->
	expr:
		return kids[0]
	;

options ->
	P_COLON P_COLON sequence:
		return [kids[2]]
	| options P_COLON P_COLON sequence:
		return kids[0] + [kids[3]]
	;

expr ->
	K_RUN name P_LPAREN arg_list? P_RPAREN prio?:
		raise NotImplementedError(kids[0])
	| expr O_AND expr:
		return BinaryExpr(*kids)
	| expr O_OR expr:
		return BinaryExpr(*kids)
	| expr O_ADD expr:
		return BinaryExpr(*kids)
	| expr O_MULT expr:
		return BinaryExpr(*kids)
	| expr O_BIT expr:
		return BinaryExpr(*kids)
	| expr P_LAQUO expr:
		return BinaryExpr(*kids)
	| expr P_RAQUO expr:
		return BinaryExpr(*kids)
	| expr O_RELEQ expr:
		return BinaryExpr(*kids)
	| expr O_EQ expr:
		return BinaryExpr(*kids)
	| expr O_SHIFT expr:
		return BinaryExpr(*kids)
	| O_C_EXPR c_expr:
		return CCodeExpr(kids[1])
	| O_TILDE expr:
		return UnaryExpr(*kids)
	| O_ADD expr:
		return UnaryExpr(*kids)
	| O_SEND expr:
		return UnaryExpr(*kids)
	| P_LPAREN expr P_RPAREN:
		return kids[1]
	| T_BUILTIN P_LPAREN expr P_RPAREN:
		raise NotImplementedError(kids[0])
	| T_CHANOP P_LPAREN varref P_RPAREN:
		return ChanOpExpr(kids[0], kids[2])
	| P_LPAREN expr P_SEQ expr P_COLON expr P_RPAREN:
		return TernaryExpr(kids[1], '?', kids[3], ':', kids[5])
	| poll:
		return kids[0]
	| varref:
		return kids[0]
	| const:
		return ConstExpr(kids[0])
	| name idx P_AT name:
		raise NotImplementedError(kids[2])
	;

c_code ->
	C_CODE_CHAR+:
		return ''.join(kids[0]).strip()
	;

c_expr ->
	C_EXPR_CHAR+:
		return ''.join(kids[0]).strip()
	;

c_cond ->
	C_COND_CHAR+:
		return ''.join(kids[0]).strip()
	;

uname ->
	name:
		return kids[0]
	;

name ->
	T_ID:
		return kids[0]
	;

const ->
	T_NUMBER:
		return kids[0]
	;
