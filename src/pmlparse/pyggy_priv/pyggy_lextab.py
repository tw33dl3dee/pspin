#
# This file was automatically generated.

# Start state names
INITIAL = 0
CODE = 1


# action 1 for pattern "code"
def action1(self) :
	return TOK_CODE
	

# action 2 for pattern "%left"
def action2(self) :
	return TOK_LEFT
	

# action 3 for pattern "%right"
def action3(self) :
	return TOK_RIGHT
	

# action 4 for pattern "%nonassoc"
def action4(self) :
	return TOK_NONASSOC
	

# action 5 for pattern "%prec"
def action5(self) :
	return TOK_PREC
	

# action 6 for pattern "%pref"
def action6(self) :
	return TOK_PREF
	

# action 7 for pattern "%gt"
def action7(self) :
	return TOK_GT
	

# action 8 for pattern "%rel"
def action8(self) :
	return TOK_REL
	

# action 9 for pattern "->"
def action9(self) :
	return TOK_DERIVES
	

# action 10 for pattern "|"
def action10(self) :
	return TOK_ALT
	

# action 11 for pattern ";"
def action11(self) :
	return TOK_END
	

# action 12 for pattern "("
def action12(self) :
	return TOK_OPAREN
	

# action 13 for pattern ")"
def action13(self) :
	return TOK_CPAREN
	

# action 14 for pattern "*"
def action14(self) :
	return TOK_STAR
	

# action 15 for pattern "+"
def action15(self) :
	return TOK_PLUS
	

# action 16 for pattern "?"
def action16(self) :
	return TOK_OPTIONAL
	

# action 17 for pattern "\n"
def action17(self) :
	global lineno
	lineno += 1
	

# action 18 for pattern "{COMMENT}"
def action18(self) :
	pass
	

# action 19 for pattern "[[:blank:]]+"
def action19(self) :
	return
	

# action 20 for pattern "[[:alpha:]_][[:alnum:]_]*"
def action20(self) :
	return TOK_ID
	

# action 21 for pattern ""[^"\n]*""
def action21(self) :
	self.value = self.value[1:-1]
	return TOK_ID
	

# action 22 for pattern "'[^'\n]*'"
def action22(self) :
	self.value = self.value[1:-1]
	return TOK_ID
	
	

# action 23 for pattern ":{WS}?{COMMENT}?\n"
def action23(self) :
	global codedata, lineno
	lineno += 1
	codedata = ""
	indent(self, CODE)
	

# action 24 for pattern ":[^\n]*"
def action24(self) :
	global lineno
	lineno += 1
	self.value = self.value[1:]
	while self.value[0] in string.whitespace :
	        self.value = self.value[1:]
	self.value += "\n"
	return TOK_SRCCODE
	
	# get a block of code until we unindent.
	

# action 25 for pattern "\n"
def action25(self) :
	global codedata, lineno
	lineno += 1
	codedata += self.value
	

# action 26 for pattern "^{WS}?{COMMENT}?\n"
def action26(self) :
	global codedata, lineno
	lineno += 1
	codedata += self.value 
	

# action 27 for pattern "^{WS}"
def action27(self) :
	global codedata, curindent
	if checkindent(self, self.value, 1) :
	        self.value = codedata
	        return TOK_SRCCODE
	else :
	        codedata += " " * (indentlevel(self.value) - curindent[-1])
	

# action 28 for pattern "^{NOTWS}[^\n]*"
def action28(self) :
	global codedata
	self.PUSHBACK(self.value)
	unindent(self)
	self.value = codedata
	return TOK_SRCCODE
	

# action 29 for pattern "[^\n]"
def action29(self) :
	global codedata
	codedata += self.value
	
	


# action eof1 for pattern "<<EOF>>"
def actioneof1(self) :
	unindent(self)
	self.value = codedata
	return TOK_SRCCODE
	

rows = [ 
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 0, 17, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 20],
  [21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21],
  [23, 24, 25, 23, 26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
  [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [27, 27, 0, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27],
  [29, 29, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 31, 32, 0, 33, 34, 0, 0, 0],
  [35, 35, 0, 35, 35, 35, 36, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [38, 39, 40, 38, 41, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [44, 45, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44],
  [0, 46, 47, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [49, 50, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49],
  [27, 27, 0, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [29, 29, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0],
  [35, 35, 0, 35, 35, 35, 36, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [38, 38, 0, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38],
  [38, 39, 40, 38, 41, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [57, 57, 40, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 58, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0],
  [44, 45, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44],
  [45, 45, 0, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45],
  [0, 46, 47, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [59, 59, 47, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59],
  [49, 50, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49],
  [50, 50, 47, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [57, 57, 40, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 42, 65, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0],
  [59, 59, 47, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]
acc = [[], [], [], [], [19], [17], [], [18], [], [], [12], [13], [14], [15], [], [24], [11], [16], [20], [20], [10], [29], [25], [28, 29], [27, 29], [25, 26], [28, 29], [], [21], [18], [], [], [], [], [], [], [22], [9], [24], [24], [23], [24], [20], [20], [28], [28], [27], [26], [], [28], [28], [7], [], [], [], [], [], [24], [20], [], [], [], [], [8], [], [1, 20], [2], [], [5], [6], [], [], [3], [], [], [4]]
starts = [(1, 1), (2, 3)]
chr2uccl = {'\x00': 0, '\x83': 0, '\x04': 0, '\x87': 0, '\x08': 0, '\x8b': 0, '\x0c': 0, '\x8f': 0, '\x10': 0, '\x93': 0, '\x14': 0, '\x97': 0, '\x18': 0, '\x9b': 0, '\x1c': 0, '\x9f': 0, ' ': 1, '\xa3': 0, '$': 0, '\xa7': 0, '(': 7, '\xab': 0, ',': 0, '\xaf': 0, '0': 12, '\xb3': 0, '4': 12, '\xb7': 0, '8': 12, '\xbb': 0, '<': 0, '\xbf': 0, '@': 0, '\xc3': 0, 'D': 17, '\xc7': 0, 'H': 17, '\xcb': 0, 'L': 17, '\xcf': 0, 'P': 17, '\xd3': 0, 'T': 17, '\xd7': 0, 'X': 17, '\xdb': 0, '\\': 0, '\xdf': 0, '`': 0, '\xe3': 0, 'd': 20, '\xe7': 0, 'h': 24, '\xeb': 0, 'l': 26, '\xef': 0, 'p': 29, '\xf3': 0, 't': 32, '\xf7': 0, 'x': 17, '\xfb': 0, '|': 33, '\xff': 0, '\x80': 0, '\x03': 0, '\x84': 0, '\x07': 0, '\x88': 0, '\x0b': 0, '\x8c': 0, '\x0f': 0, '\x90': 0, '\x13': 0, '\x94': 0, '\x17': 0, '\x98': 0, '\x1b': 0, '\x9c': 0, '\x1f': 0, '\xa0': 0, '#': 4, '\xa4': 0, "'": 6, '\xa8': 0, '+': 10, '\xac': 0, '/': 0, '\xb0': 0, '3': 12, '\xb4': 0, '7': 12, '\xb8': 0, ';': 14, '\xbc': 0, '?': 16, '\xc0': 0, 'C': 17, '\xc4': 0, 'G': 17, '\xc8': 0, 'K': 17, '\xcc': 0, 'O': 17, '\xd0': 0, 'S': 17, '\xd4': 0, 'W': 17, '\xd8': 0, '[': 0, '\xdc': 0, '_': 17, '\xe0': 0, 'c': 19, '\xe4': 0, 'g': 23, '\xe8': 0, 'k': 17, '\xec': 0, 'o': 28, '\xf0': 0, 's': 31, '\xf4': 0, 'w': 17, '\xf8': 0, '{': 0, '\xfc': 0, '\x7f': 0, '\x81': 0, '\x02': 0, '\x85': 0, '\x06': 0, '\x89': 0, '\n': 2, '\x8d': 0, '\x0e': 0, '\x91': 0, '\x12': 0, '\x95': 0, '\x16': 0, '\x99': 0, '\x1a': 0, '\x9d': 0, '\x1e': 0, '\xa1': 0, '"': 3, '\xa5': 0, '&': 0, '\xa9': 0, '*': 9, '\xad': 0, '.': 0, '\xb1': 0, '2': 12, '\xb5': 0, '6': 12, '\xb9': 0, ':': 13, '\xbd': 0, '>': 15, '\xc1': 0, 'B': 17, '\xc5': 0, 'F': 17, '\xc9': 0, 'J': 17, '\xcd': 0, 'N': 17, '\xd1': 0, 'R': 17, '\xd5': 0, 'V': 17, '\xd9': 0, 'Z': 17, '\xdd': 0, '^': 0, '\xe1': 0, 'b': 17, '\xe5': 0, 'f': 22, '\xe9': 0, 'j': 17, '\xed': 0, 'n': 27, '\xf1': 0, 'r': 30, '\xf5': 0, 'v': 17, '\xf9': 0, 'z': 17, '\xfd': 0, '~': 0, '\x01': 0, '\x82': 0, '\x05': 0, '\x86': 0, '\t': 1, '\x8a': 0, '\r': 0, '\x8e': 0, '\x11': 0, '\x92': 0, '\x15': 0, '\x96': 0, '\x19': 0, '\x9a': 0, '\x1d': 0, '\x9e': 0, '!': 0, '\xa2': 0, '%': 5, '\xa6': 0, ')': 8, '\xaa': 0, '-': 11, '\xae': 0, '1': 12, '\xb2': 0, '5': 12, '\xb6': 0, '9': 12, '\xba': 0, '=': 0, '\xbe': 0, 'A': 17, '\xc2': 0, 'E': 17, '\xc6': 0, 'I': 17, '\xca': 0, 'M': 17, '\xce': 0, 'Q': 17, '\xd2': 0, 'U': 17, '\xd6': 0, 'Y': 17, '\xda': 0, ']': 0, '\xde': 0, 'a': 18, '\xe2': 0, 'e': 21, '\xe6': 0, 'i': 25, '\xea': 0, 'm': 17, '\xee': 0, 'q': 17, '\xf2': 0, 'u': 17, '\xf6': 0, 'y': 17, '\xfa': 0, '}': 0, '\xfe': 0}
actions = [None, action1, action2, action3, action4, action5, action6, action7, action8, action9, action10, action11, action12, action13, action14, action15, action16, action17, action18, action19, action20, action21, action22, action23, action24, action25, action26, action27, action28, action29]
eofactions = [None, actioneof1]

lexspec = (rows,acc,starts,actions,eofactions,chr2uccl)

from errors import *

TOK_CODE = "TOK_CODE"
TOK_LEFT = "TOK_LEFT"
TOK_RIGHT = "TOK_RIGHT"
TOK_NONASSOC = "TOK_NONASSOC"
TOK_PREC = "TOK_PREC"
TOK_PREF = "TOK_PREF"
TOK_GT = "TOK_GT"
TOK_REL = "TOK_REL"
TOK_DERIVES = "TOK_DERIVES"
TOK_ALT = "TOK_ALT"
TOK_END = "TOK_END"
TOK_OPAREN = "TOK_OPAREN"
TOK_CPAREN = "TOK_CPAREN"
TOK_ID = "TOK_ID"
TOK_STAR = "TOK_STAR"
TOK_PLUS = "TOK_PLUS"
TOK_OPTIONAL = "TOK_OPTIONAL"
TOK_SRCCODE = "TOK_SRCCODE"

import string

lineno = 1
codedata = ""
tabstop = 8
curindent = [0]

def error(l, str) :
        global lineno
        raise SpecError("%d near '%s': %s" % (lineno, l.value, str))

def indentlevel(str) :
        col = 0
        for ch in str :
                if ch == '\t' :
                        col = (1 + col / tabstop) * tabstop
                else :
                        col += 1
        return col

def indent(l, st) :
        curindent.append(-1)
        l.PUSHSTATE(st)

def unindent(l) :
        l.POPSTATE()
        curindent[-1:] = []

def checkindent(l, str, allowindent) :
        cnt = indentlevel(str)
        if curindent[-1] == -1 :
                curindent[-1] = cnt
        if cnt > curindent[-1] and not allowindent :
                error(l, "illegal indentation")
        if cnt < curindent[-1] :
                unindent(l)
                return 1
        return 0


